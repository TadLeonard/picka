{"name":"Picka","google":"","tagline":"Picka is a python based data generation and randomization module which aims to increase coverage by increasing the amount of tests you _dont_ have to write by hand.","body":"Picka: A Python module for data generation and randomization.\r\n-------------------------------------------------------------\r\n\r\nAuthor: Anthony Long\r\n\r\nVersion: 0.91\r\n  - Removed sentence generator.\r\n  - Added tests.\r\n  - Reverted back from SQLite to JSON.\r\n\r\n\r\nWhat is Picka?\r\n______________\r\n\r\nPicka generates randomized data either from lists of known good data (or bad) stored\r\nin a sqlite database, or by generating randomized realistic data, using string formatting (behind the scenes). Picka has a function for any field you would need filled in. With `selenium`, something like would populate the \"field-name-here\" box for you, 100 times with random names.\r\n\r\n\r\n\tfor i in xrange(101):\r\n\t\tself.selenium.type('field-name-here', picka.male_name())\r\n\r\nBut this is just the beginning. Other ways to implement this, include using dicts:\r\n\r\n\r\n\tuser_information = {\r\n\t\t\"first_name\": picka.male_name(),\r\n\t\t\"last_name\": picka.last_name(),\r\n\t\t\"email_address\": picka.email(extension='.org'),\r\n\t\t\"password\": picka.password_numerical(6),\r\n\t}\r\n\r\nThis would provide:\r\n\r\n    \r\n    {\r\n        \"first_name\": \"Anthony\", \r\n        \"last_name\": \"Long\", \r\n        \"email_address\", \"uragn@getit.com\", \r\n        \"password\": \"485444\"\r\n    }\r\n\r\n\r\nExamples:\r\n---------\r\n\r\nSelenium\r\n________\r\n\r\n\r\n\tdef search_for_garbage():\r\n\t\tselenium.open('http://yahoo.com')\r\n\t\tselenium.type('id=search_box', picka.random_string(10))\r\n\t\tselenium.submit()\r\n\t\r\n\tdef test_search_for_garbage_results():\r\n\t\tsearch_for_garbage()\r\n\t\tselenium.wait_for_page_to_load('30000')\r\n\t\tassert selenium.get_xpath_count('id=results') == 0\r\n\t\r\nFuncargs / pytest\r\n_________________\r\n\r\n\r\n\tdef pytest_generate_tests(metafunc):\r\n\t\tif \"test_string\" in metafunc.funcargnames:\r\n\t\t\tfor i in range(10):\r\n\t\t\t\tmetafunc.addcall(funcargs=dict(numiter=picka.random_string(20)))\r\n\t\r\n\tdef test_func(test_string):\t\r\n\t\tassert test_string.isalpha()\r\n\t\tassert len(test_string) == 20\r\n\r\n\r\nMySQL / SQLite\r\n______________\r\n\r\n\r\n    first, last, age = picka.first_name(), picka.last_name(), picka.age()\r\n\tcursor.execute(\r\n\t    \"insert into user_data (first_name, last_name, age) VALUES (?, ?, ?)\",\r\n\t    (first, last, age))\r\n    \r\n\r\nHTTP\r\n____\r\n\r\n\r\n\tdef post(host, data):\r\n\t    http = httplib.HTTP(host)\r\n\t    return http.send(data)\r\n\t\r\n\tdef test_post_result():\r\n\t    post(\"www.spam.egg/bacon.htm\", picka.random_string(10))\r\n\r\n\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}